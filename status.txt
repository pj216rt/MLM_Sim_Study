7/13/2023
Today I focused on getting R code to run on the HPC.  The issue seems to be
with loading libraries, but I want to see how in depth the issue is. 

To start, we can add files to the HPC with the following command: "cp
/tmp/test.txt USERNAME@export.rcc.fsu.edu:~".  The colon and squiggle are
needed.  Trust me.  We can run R files by calling "Rscript file_name.R". 

I have been able to install cmdstanr and run the example simulation.  The
issue I believe is when you install R/R Studio on a local machine, you are
actually installing a host of packages by default.  I don't belive that the
HPC has that feature.  This means that we need to install every package that
we need from the start. 

Made a folder on my HPC account for the R and STAN files that we have to go.  

7/9/2023
This weekend, I spent a good deal of time getting the stan files updated.
There were 11 stan files that we are looking at: 

1.) uninformative prior
2.) Ridge prior
3.) Local Students t prior
4.) LASSO prior
5.) Elastic net prior
6.) Group LASSO prior
7.) Hyper-LASSO prior
8.) Horseshoe prior
9.) Regularized horseshoe prior
10.) Bernoulli discrete normal mixture prior
11.) Uniform discrete normal mixture prior

For some of these, the procedure was as simple as modifying the code that van
Erp provided.  In other cases, I had to tweak the format due to the fact that
van Erp used vectors of predictors and we have a matrix.  

I have questions about how to best impliment the Group Lasso prior.  Without
any strict grouping design, this prior simply becomes the regular lasso.

Attempts to compile the uniform discrete normal mixture prior have resulted in
an odd error message: ***INSERT THE EXACT MESSAGE HERE***

I also have concerns about the generated quantities block in the stan files.
I am afraid that we are not taking into account the multivariate normal
distribution when we utilize the random number generator.  Should we include
this?

7/8/2023
I just started this weekend by working on implimenting an efficiency change
that I discovered over the 4th of July break into the other STAN files.  In
short, by utilizing Cholensky factorization, I am able to keep the number of
divergent transitions to below 1.0% of all transitions.  This isn't perfect,
but it allows for a higher effective sample size in the STAN sampling.

As of 10pm tonight, I have tweaked the ridge prior, the students t prior, the
lasso prior and the horseshoe prior.

7/7/2023
I drove back from NC today, so I did not do much in terms of the project.  I
did however, get Github to work finally.  This means that there should be a
huge rush of changes to the files as I add, commit, and push the main working
files.

7/6/2023
After spending a few days celebrating the 4th, I am confident that I am on a
"final approach" for this simulation design.  There will be four main .R
files.  These will be composed as follows:

1.) function respository.  This will hold the functions.  This will also end up being the
largest file.
2.) Data generation function.  This file will generate the data.  Right now,
we are thinking of having ultimately 6 different configurations of "true"
coefficients.  For each configuration, we want to be able to conduct a grid
search over various values of sample size, correlation, and standard error.
By varrying the standard error, we can control in part the SNR.  For each step
along the grid, we will generate a large number of datasets. 
3.) Simulation file.  This file is going to be relatively short, but will
consume the most memory.  In this file, we will run the simulation in parallel
to save time. 
4.) Data Analysis.  This file will analyze the simulated data from the
simulation file.  
